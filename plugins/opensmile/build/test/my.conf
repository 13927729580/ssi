
;;;;; all the components we require are listed here:
[componentInstances:cComponentManager]
 // this line configures the default data memory:
instance[dataMemory].type=cDataMemory
instance[openSmileSSIsource].type = ssiSource
instance[fr1].type=cFramer
instance[pe2].type=cVectorPreemphasis
instance[w1].type=cWindower
instance[fft1].type=cTransformFFT
instance[fftmp1].type=cFFTmagphase
instance[mspec].type=cMelspec
instance[mfcc].type=cMfcc
instance[mzcr].type=cMZcr
instance[acf].type=cAcf
instance[cepstrum].type=cAcf
instance[pitchACF].type=cPitchACF
instance[energy].type=cEnergy
instance[spectral].type=cSpectral
instance[lld].type=cContourSmoother
;instance[lld].type=cVectorConcat
instance[delta1].type=cDeltaRegression
instance[functL1].type=cFunctionals
instance[openSmileSSIsink].type = ssiSink
instance[csvSink].type = cCsvSink
printLevelStats=0
nThreads=10

;;;;;;;;;;;;;;;;; below the config sections for the components start ;;;;;;;;;


  // --- pre-processing ---

  // --- SSI Source ---
  // the component name must be provided to SSI via the XML-File
[openSmileSSIsource:ssiSource]
writer.dmLevel = wave
  // --- End SSI Source ---

[fr1:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames
frameSize = 0.0250
frameStep = 0.010
buffersize = 1000

[pe2:cVectorPreemphasis]
reader.dmLevel=frames
writer.dmLevel=framespe
k=0.97

[w1:cWindower]
reader.dmLevel=framespe
writer.dmLevel=winframe
winFunc = ham
gain = 1.0

  // ---- LLD -----

[fft1:cTransformFFT]
reader.dmLevel=winframe
writer.dmLevel=fftc

[fftmp1:cFFTmagphase]
reader.dmLevel=fftc
writer.dmLevel=fftmag

[mspec:cMelspec]
reader.dmLevel=fftmag
writer.dmLevel=mspec1
htkcompatible = 1
usePower = 0
lofreq = 0
hifreq = 8000

[mfcc:cMfcc]
reader.dmLevel=mspec1
writer.dmLevel=mfcc1
firstMfcc = 0
lastMfcc =  12
htkcompatible = 1


[acf:cAcf]
reader.dmLevel=fftmag
writer.dmLevel=acf

[cepstrum:cAcf]
reader.dmLevel=fftmag
writer.dmLevel=cepstrum
cepstrum=1

[pitchACF:cPitchACF]
  ; the pitchACF component must ALWAYS read from acf AND cepstrum in the given order!
reader.dmLevel=acf;cepstrum
writer.dmLevel=pitch
processArrayFields=0
F0=1
voiceProb=1
HNR=0
F0env=1
voiceQual=1

[energy:cEnergy]
reader.dmLevel=winframe
writer.dmLevel=energy
nameAppend=energy
rms=1
log=1

[mzcr:cMZcr]
reader.dmLevel=frames
writer.dmLevel=mzcr
zcr=1
amax=0
mcr=1
maxmin=0

[spectral:cSpectral]
reader.dmLevel=fftmag
writer.dmLevel=spectral
bands[0]=0-250
bands[1]=0-650
bands[2]=250-650
bands[3]=1000-4000
rollOff[0] = 0.25
rollOff[1] = 0.50
rollOff[2] = 0.75
rollOff[3] = 0.90

[lld:cContourSmoother]
reader.dmLevel=energy;mfcc1;mzcr;pitch;spectral
writer.dmLevel=lld
writer.levelconf.nT=10
;writer.levelconf.noHang=2
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
;processArrayFields=0

  // ---- delta regression of LLD ----

[delta1:cDeltaRegression]
reader.dmLevel=lld
writer.dmLevel=lld_de
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
deltawin=2
blocksize=1

[delta2:cDeltaRegression]
reader.dmLevel=lld_de
writer.dmLevel=lld_dede
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
deltawin=2
blocksize=1

[functL1:cFunctionals]
reader.dmLevel=lld;lld_de
writer.dmLevel=func
 ; frameSize and frameStep = 0 => functionals over complete input
 ; (NOTE: buffersize of lld and lld_de levels must be large enough!!)
frameSize=0
frameStep=0
functionalsEnabled=Extremes;Regression;Moments;DCT;Percentiles;Crossings;Segments;Peaks;Times
Percentiles.percentile[0] = 0.95
Percentiles.percentile[1] = 0.98
;Extremes.maxameandist=0
;Extremes.minameandist=0
;Extremes.amean=1
;Regression.qregc1 = 0
;Regression.qregc2 = 0
;Regression.qregc3 = 0
;Regression.qregerrA = 0
;Regression.qregerrQ = 0
;Regression.centroid = 0
;Regression.linregerrA = 0
;Moments.variance = 1

  // --- SSI-Sink ---
  // the component name must be provided to SSI via the XML-File
[openSmileSSIsink:ssiSink]
reader.dmLevel = func
  // --- End SSI-Sink ---

  ;;;; default (template) configuration section for component 'cCsvSink' ;;;;
[csvSink:cCsvSink]
;reader.dmLevel=spectral;energy;pitch;mfcc1;mzcr
reader.dmLevel=func
filename = my.csv
delimChar = ;
append = 1
timestamp = 1
number = 1
printHeader = 1



