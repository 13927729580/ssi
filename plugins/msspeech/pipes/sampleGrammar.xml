<grammar version="1.0" xml:lang="de-DE" root="rootRule" tag-format="semantics/1.0" xmlns="http://www.w3.org/2001/06/grammar">

<!--
	Output of the SSI recognizer plugin:
		- "structure" output format:
			The root rule's "out" variable as a nested data structure.
			Example:
				"[
					commandtype:single,
					data:
					[
						action:move,
						parameters:
						[
							speed:normal,
							dir:left
						]
					],
					text:'geh nach links'
				]"
		- "keyword" output format:
			Either the root rule's "out" value (if "out" is a primitive data type) or its first child (if "out" is an Object).
			Example:
				"single", "nonsense"
		- "plain_text" output format:
			The spoken text without any semantics.
			Example:
				"geh nach links"
			

    Special variable names:
        The prefix "TAG" can be used to avoid conflicts 
        with reserved words, eg. "function". (See http://www.ecma-international.org/ecma-262/5.1/#sec-7.6.1.1
		for a list these of reserved words.)
		It is automatically removed by the SSI recognizer plug-in.
		
		Example:
			<tag> out.TAGfunction = "test"; </tag>
			becomes "function:test" in the output data structure
		
    Special variable values:
        String values starting with "$" are replaced 
        by the SSI recognizer plug-in.
		
		Currently, the following replacements are implemented:
        - "$startTime": start time of the surrounding rule's 
          first word (ms relative to the phrase's start)
        - "$endTime": end time of the surrounding rule's last 
          word (ms relative to the whole phrase's start)
		
		Example:
			<tag> out.start = "$startTime"; </tag>
-->

  <rule id="rootRule" scope="public">
	<one-of>
		<item>
			<ruleref uri="#command_move"/> 
			<tag>
				out.commandtype = "single";
				out.data = rules.command_move;
			</tag>
		</item>
		<item>
			<tag>
				out.commandtype = "sequence";
				out.data = new Array();
			</tag>
			
			<ruleref uri="#command_move"/>			
			<tag> out.data.push(rules.command_move); </tag>
				
			<item repeat="1-4">
				dann
				<ruleref uri="#command_move"/>			
				<tag> out.data.push(rules.command_move); </tag>
			</item>
		</item>
		<item>
			<ruleref uri="#nonsense"/> 
			<tag>
				out.commandtype = "nonsense";
				out.data = rules.nonsense.value;
			</tag>
		</item>
	</one-of>
	<!-- append spoken text AFTER out was assigned -->
	<tag>
		out.text = "'" + meta.current().text + "'";
	</tag>
  </rule>
  

  
  <rule id="command_move" scope="public">
		<tag>
			out.action = "move";
			out.parameters = new Object();
		</tag>
  
		<one-of>
			<item>geh			<tag> out.parameters.speed = "normal";	</tag>	</item>          
			<item>lauf			<tag> out.parameters.speed = "fast";	</tag>	</item>
			<item>beweg dich	<tag> out.parameters.speed = "any";	</tag>	</item>
		</one-of>
		
		<item repeat="0-1">
			bitte
		</item>
		
		<ruleref uri="#direction"/>				
		<tag> out.parameters.dir = rules.direction; </tag>
  </rule>
  
  <rule id="direction" scope="public">
		<one-of>
			<item>
				<tag>out = "up";</tag>
				<one-of>
					<item>hoch</item>          
					<item>nach oben</item>          
					<item>rauf</item>          
				</one-of>
			</item>
			<item>
				<tag>out = "down";</tag>
				<one-of>
					<item>runter</item>          
					<item>nach unten</item>         
				</one-of>
			</item>
			<item>
				<tag>out = "left";</tag>
				nach links
			</item>
			<item>
				<tag>out = "right";</tag>
				nach rechts
			</item>
			<item>
				<tag>out = "forward";</tag>
				<one-of>
					<item>vor</item>          
					<item>vorwärts</item>          
					<item>nach vorne</item>          
				</one-of>
			</item>
			<item>
				<tag>out = "back";</tag>
				<one-of>
					<item>rückwärts</item>          
					<item>zurück</item>          
					<item>hinter</item>   
					<item>nach hinten</item>          
				</one-of>
			</item>
		</one-of>
  </rule>
  

  <rule id="nonsense" scope="public">  
		<tag>
			out.value = "";
			out.uselessValue = "blubb";
		</tag>
		
		<item repeat="1-">
			bla
			<tag>out.value += "bla";</tag>
		</item>
  </rule>

</grammar>